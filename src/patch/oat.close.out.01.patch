# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: /home/elink/Sandlion/Clients/Driscoll Childrens Health Plan/src/drupal/sites/all/modules/healthimo
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: healthimo.admin.inc
--- healthimo.admin.inc Locally New
+++ healthimo.admin.inc Locally New
@@ -0,0 +1,90 @@
+<?php
+
+/**
+ * Implementation of hook_admin_settings() for configuring the module
+ */
+function healthimo_admin_settings_form(&$form_state) {
+    $form['settings'] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Enable module features'),
+        '#collapsible' => TRUE,
+        '#collapsed' => FALSE,
+    );
+    $form['settings']['healthimo_cron_active'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Enable cron for the healthimo module'),
+        '#default_value' => variable_get('healthimo_cron_active', 1),
+        '#description' => t('Enables / disable cron for the module.')
+    );
+    $form['settings']['healthimo_messaging_outbound_to_admin_user_only'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Send outbound messages to admin user only'),
+        '#default_value' => variable_get('healthimo_messaging_outbound_to_admin_user_only', 1),
+        '#description' => t('Send outbound messages to admin user only')
+    );
+    $form['settings']['healthimo_max_questions_for_single_session'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Max number of questions for a single session'),
+        '#default_value' => variable_get('healthimo_max_questions_for_single_session', 4),
+        '#description' => t('healthimo_max_questions_for_single_session')
+    );
+    return system_settings_form($form);
+}
+
+function healthimo_admin_settings_form_validate($form, &$form_state) {
+//  if (!preg_match('/^UA-\d{4,}-\d+$/', $form_state['values']['googleanalytics_account'])) {
+//    form_set_error('googleanalytics_account', t('A valid Google Analytics account number is case sensitive and formatted like UA-xxxxxx-x.'));
+//  }
+}
+
+function healthimo_admin_reset_admin_form(&$form_state) {
+    $form['settings'] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Enable module features'),
+        '#collapsible' => FALSE,
+        '#collapsed' => FALSE,
+    );
+    $form['settings']['healthimo_reset_admin'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Reset the admin users messaging state?'),
+        '#default_value' => 0,
+        '#description' => t('Clears hfstx log, asthma log, profile flags for admin user')
+    );
+    return system_settings_form($form);
+}
+
+function healthimo_admin_reset_admin_form_validate($form, &$form_state) {
+    if ($form_state['values']['healthimo_reset_admin'] == 1) {
+        // clear hfstx log
+        db_query(
+                "
+                DELETE
+                FROM {hfstx_message_log}
+                WHERE
+                uid = 1        
+                "
+        );
+        // clear asthma log
+        db_query(
+                "
+                DELETE
+                FROM {healthimo_asthma_message_log} 
+                WHERE
+                uid = 1        
+                "
+        );
+        // clear all profile values
+        db_query(
+                "
+                DELETE
+                FROM {profile_values} 
+                WHERE
+                uid = 1        
+                "
+        );
+        form_set_error('test', t('uid 1 reset'));
+    }
+}
\ No newline at end of file
Index: healthimo.inc
--- healthimo.inc Base (BASE)
+++ healthimo.inc Locally Modified (Based On LOCAL)
@@ -6,7 +6,9 @@
 define('PROFILE_CATEGORY_PHR', 'Personal Private Health Record');
 
 function healthimo_profile_save($account, $field, $value, $category) {
-    $fid_result = db_query("select fid from profile_fields where name = '%s' and category = '%s'", $field, $category);
+    //$category ignored since fields in this system are all unique and looking it up is problematic
+    //$fid_result = db_query("select fid from profile_fields where name = '%s' and category = '%s'", $field, $category);
+    $fid_result = db_query("select fid from profile_fields where name = '%s'", $field );
     if ($fid_result) {
         $field = db_fetch_object($fid_result);
         $fid = $field->fid;
Index: healthimo.message.log.inc
--- healthimo.message.log.inc Base (BASE)
+++ healthimo.message.log.inc Locally Modified (Based On LOCAL)
@@ -72,12 +72,9 @@
         $message_log->updated = time();
 
         if ($message_log->mid > 0) {
-            //todo x error checking?
             drupal_write_record('healthimo_message_log', $this, 'mid');
         } else {
-            //todo x error checking?
             drupal_write_record('healthimo_message_log', $this);
-            //todo x error checking?
             $message_log->mid = db_last_insert_id('healthimo_message_log', 'mid');
         }
 
@@ -239,7 +236,6 @@
     }
 
     public function load_most_recent_request($uid) {
-        //todo x program id
\ No newline at end of file
         healthimo_log(' healthimo_message_log_load_most_recent_request');
         $result = db_query_range(
                 "
Index: healthimo.module
--- healthimo.module Base (BASE)
+++ healthimo.module Locally Modified (Based On LOCAL)
@@ -19,6 +19,7 @@
 function healthimo_init() {
     error_reporting(E_ALL | E_STRICT);
     module_load_include('inc', 'healthimo', 'healthimo');
+    module_load_include('inc', 'healthimo', 'healthimo.admin');
     module_load_include('inc', 'healthimo', 'healthimo.date');
     module_load_include('inc', 'healthimo', 'healthimo.string');
     module_load_include('inc', 'healthimo', 'healthimo.quicktip');
@@ -57,6 +58,22 @@
         'page arguments' => array('healthimo_sms_form'),
         'access arguments' => array('administer healthimo'),
     );
+    $items['admin/healthimo/settings'] = array(
+        'title' => 'settings',
+        'description' => 'Configure healthimo settings',
+        'page callback' => 'drupal_get_form',
+        'page arguments' => array('healthimo_admin_settings_form'),
+        'access arguments' => array('administer healthimo'),
+        'file' => 'healthimo.admin.inc',
+    );
+    $items['admin/healthimo/reset-admin-user'] = array(
+        'title' => 'reset-admin',
+        'description' => 'Reset admin user',
+        'page callback' => 'drupal_get_form',
+        'page arguments' => array('healthimo_admin_reset_admin_form'),
+        'access arguments' => array('administer healthimo'),
+        'file' => 'healthimo.admin.inc',
+    );
 
     /* dev menus */
     $items['admin/healthimo/dev'] = array(
Index: healthimo.sms.inc
--- healthimo.sms.inc Base (BASE)
+++ healthimo.sms.inc Locally Modified (Based On LOCAL)
@@ -50,7 +50,7 @@
 
     $express = $form_state['values']['express'] ? 1 : 0;
 
-//todo  rc? message? function sms_clubtexting_error_codes() {
+//  rc? message? function sms_clubtexting_error_codes() {
     $rc = healthimo_sms_outgoing(
             $form_state['values']['number'], $form_state['values']['message'], array('response_expected' => $express,)
     );
@@ -78,7 +78,7 @@
         watchdog('healthimo_sms_outgoing', 'logging only reply %uid %phone %reply', array('%uid' => $user->uid, '%phone' => $number, '%reply' => $message));
         //drupal_set_header('Content-Type: text/plain');
         //print $reply;
-        return;
+        return TRUE;
     }
 
 // log all outbound in my own table, since i'm not a gateway(yet?) just log outbound here
@@ -140,18 +140,23 @@
         //$optOutReply = 'You have been opted out of all healthimo programs. To start again, text HEALTHY START to 25827';
         //healthimo_sms_outgoing($cleanNumber, $optOutReply);
     } else if (in_array('healthy', $words) && strcmp('healthy', $words[0]) == 0) {
+        $isKeyword = true;
         // is keyword? process as keyword
         watchdog('healthimo_sms_process_inbound', 'healthy ' . $user->uid . ' ' . $words[0] . ' ' . $cleanNumber . ' [' . $cleanMessage . ']');
         //ensure opted in, multiple profile field updates not working, so do direct update
-        hfstx_process_incoming_sms($user, $cleanNumber, $cleanMessage);
+        hfstx_process_incoming_sms($user, $cleanNumber, $cleanMessage, $isKeyword);
         healthimo_profile_save($user, 'profile_keyword_stop', 0, PROFILE_CATEGORY_MOBILE);
     } else {
+        $asthmaSentReply = false;
         // is not a keyword? process by features
         if ($user->profile_keyword_asthma == 1 ) {//|| $user->profile_keyword_asma == 1) {
-            healthimo_asthma_process_incoming_sms($user, $cleanNumber, $cleanMessage);
+            $asthmaSentReply = healthimo_asthma_process_incoming_sms($user, $cleanNumber, $cleanMessage);
         }
-        if (hfstx_is_enrolled_in_hfstx($user)) {
-            // process replies to hfstx requests (they don't have responses, so just process w/o returning a response)
\ No newline at end of file
+        
+        // process the reply trough hfstx also 
+        if ($asthmaSentReply == false && hfstx_is_enrolled_in_hfstx($user)) {
+            // process replies to hfstx requests 
+            // may have a reply if asking profile questions
\ No newline at end of file
             hfstx_process_incoming_sms($user, $cleanNumber, $cleanMessage);
         }
     }
Index: healthimo_asthma/healthimo_asthma.admin.inc
--- healthimo_asthma/healthimo_asthma.admin.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.admin.inc Locally Modified (Based On LOCAL)
@@ -40,6 +40,16 @@
         '#default_value' => variable_get('healthimo_healthimo_asthma_appt_reminder_active', 1),
         '#description' => t('Enables appointment reminders for the module')
     );
+    $form['settings']['healthimo_asthma_max_to_send_per_run'] = array(
+        '#type' => 'textfield',
+        '#title' => t('Max users to messsage per cron run'),
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#default_value' => variable_get('healthimo_asthma_max_to_send_per_run', 1),
+        '#description' => t('healthimo_asthma_max_to_send_per_run')
+    );
+    
     //
 
     return system_settings_form($form);
@@ -109,7 +119,7 @@
             ", $numberToEnroll
     );
 
-    $invite = "Reply HEALTHY ASTHMA to get FREE asthma education by Driscoll Childrens and healthimo. Reply stop to end. healthimo.com/dchp";
+    $invite = "Reply HEALTHY ASTHMA to get FREE asthma education by Driscoll Childrens and healthimo. Reply stop to end.";
     $i = 0;
     while ($row = db_fetch_object($result)) {
         $uid = $row->uid;
Index: healthimo_asthma/healthimo_asthma.appointment.reminder.inc
--- healthimo_asthma/healthimo_asthma.appointment.reminder.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.appointment.reminder.inc Locally Modified (Based On LOCAL)
@@ -53,7 +53,6 @@
         $appointment_date = healthimo_date_make_local_time($appt, $tz);
         if ($appointment_date === FALSE) {
             return FALSE;
-            // todo * watchdog
         }
 
         $appointment_reminder_time = healthimo_date_make_local_time($appt, $tz);
Index: healthimo_asthma/healthimo_asthma.controller.reminder.inc
--- healthimo_asthma/healthimo_asthma.controller.reminder.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.controller.reminder.inc Locally Modified (Based On LOCAL)
@@ -92,44 +92,11 @@
 
 function healthimo_asthma_send_controller_reminder($user, $period) {
     if (PM == $period) {
-        $quickTip = healthimo_asthma_get_next_controller_reminder_pm($user);
+        return healthimo_asthma_get_next_controller_reminder_pm($user);
     } else if (AM == $period) {
-        $quickTip = healthimo_asthma_get_next_controller_reminder_am($user);
-    } else {
-        healthimo_asthma_log("Error no period set for controller reminder");
-        return FALSE;
+        return healthimo_asthma_get_next_controller_reminder_am($user);
     }
 
-    if ($quickTip && healthimo_profile_has_sms($user)) {
-        return healthimo_asthma_controller_reminder_send_to_sms($user, $quickTip);
-    } else {
-        //TODO * send token to process that out of messages
-        //TODO X send token to process that out of messages
-        watchdog('healthimo_asthma_controller_reminder', 'No quicktip found for controller reminder', array(), WATCHDOG_ALERT
-        );
-        /////////////////////////
-        /////////////////////////
-        /////////////////////////
-        ////
-        $processContext = new stdClass();
-        $processContext->message_log = NULL;
-        $processContext->user = $user;
-        $processContext->number = healthimo_profile_get_sms($user);
-        $processContext->message = NULL;
-        $processContext->reply = NULL;
-        $processContext->previousState = NULL;
-        ////
-        $currentState = $user->profile_asthma_process_state;
-        $asthmaProcess = new HealthimoAsthmaProcess($currentState, $processContext);
-        $newState = $asthmaProcess->process(HealthimoProcess::PROTOCOL_COMPLETE);
-        healthimo_asthma_log("newState $newState");
-        //
-        $user = healthimo_profile_save($user, 'profile_asthma_process_state', $newState, PROFILE_CATEGORY_ASTHMA);
-        ////
-        /////////////////////////
-        /////////////////////////
-        /////////////////////////
-    }
 
     return FALSE;
 }
@@ -149,7 +116,11 @@
     healthimo_asthma_log(' send controller reminder sms');
     //if (SEND_ENABLED) {
     //healthimo_sms_send
-
+    if ($message_log->response_expected) {
+        $account = healthimo_profile_save(
+                $account, 'profile_question_count', $account->profile_question_count + 1, PROFILE_CATEGORY_PHR
+        );
+    }
     if (healthimo_sms_outgoing($address, trim($message_log->message), array('response_expected' => $message_log->response_expected,))) {
 //    if (sms_send($address, trim($message_log->message))) {
         $message_log->processed = time();
@@ -254,20 +225,31 @@
     $randomTerm = $termsToPickFrom[array_rand($termsToPickFrom)];
     healthimo_asthma_log('random term ' . $randomTerm);
 
-    if ($randomTerm == 'Asthma Zone') {
+
+    if ($randomTerm == 'Asthma Zone' || $randomTerm == 'Asthma Controller') {
+        //75% of the time, use the OAT question 
+        if (time() % 4 != 0) {
+            $randomTerm = 'OAT Question';
+            healthimo_asthma_log('random term ' . $randomTerm);
+        }
+    }
+
+    if ($randomTerm == 'OAT Question') {
+        return hfstx_ask_question($user, $number);
+    } else if ($randomTerm == 'Asthma Zone') {
         $request = new stdClass();
         $request->nid = 0;
         $request->title = 'How are you feeling... what zone are you in? Reply with green, yellow or red.';
         $request->response_expected = 1;
         $request->response_type_expected = REQUEST_TYPE_ZONE;
-        return $request;
+        $reply = $request;
     } else if ($randomTerm == 'Asthma Controller') {
         $request = new stdClass();
         $request->nid = 0;
         $request->title = 'Everyone forgets their controller sometimes. How many times did you miss this week? Reply with the number you missed.';
         $request->response_expected = 1;
         $request->response_type_expected = REQUEST_TYPE_CONTROLLER;
-        return $request;
+        $reply = $request;
     } else {
         //get AM + randomTerm that hasn't been seen yet
         $unseenQuicktips = healthimo_asthma_get_unseen_am_quicktips($user, $randomTerm);
@@ -285,10 +267,17 @@
         $randomTip = $tipArray[array_rand($tipArray)];
         $randomTip->response_expected = 0;
         $randomTip->response_type_expected = null;
-        return $randomTip;
+        $reply = $randomTip;
     }
+
+
+    if (healthimo_profile_has_sms($user)) {
+        return healthimo_asthma_controller_reminder_send_to_sms($user, $reply);
 }
 
+    return false;
+}
+
 /**
  * @param <type> $user
  * @return <type> A randomly selected quicktip from 'the pm collection' that hasn't been seen by this user before
@@ -302,8 +291,11 @@
     $randomTip = $tipArray[array_rand($tipArray)];
     $randomTip->response_expected = 0;
     $randomTip->response_type_expected = null;
-    return $randomTip;
+
+    if (healthimo_profile_has_sms($user)) {
+        return healthimo_asthma_controller_reminder_send_to_sms($user, $randomTip);
 }
+}
\ No newline at end of file
 
 function healthimo_asthma_get_unseen_pm_quicktips($user) {
     $term1 = healthimo_taxonomy_get_term_by_name(PM);
Index: healthimo_asthma/healthimo_asthma.inbound.inc
--- healthimo_asthma/healthimo_asthma.inbound.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.inbound.inc Locally Modified (Based On LOCAL)
@@ -22,16 +22,9 @@
     global $user;
     $reply = NULL;
 
-    //TODO if (healthimo_asthma_is_enrolled($user)) {
+    // if (healthimo_asthma_is_enrolled($user)) {
     healthimo_asthma_log("inbound for enrolled");
     //        
-    // save raw message inbound, may save again later more correlated/parsed etc...
-    $message_log = healthimo_asthma_message_log_get_default($user->uid, 4, $number, $message, 0, 0);
-    $message_log->processed = time();
-    $message_log->response_expected = 0;
-    $message_log->outbound = 0;
-    $message_log = healthimo_asthma_message_log_save($message_log);
-    //
     $processContext = new stdClass();
     $processContext->message_log = $message_log;
     $processContext->user = $user;
@@ -52,7 +45,7 @@
     healthimo_asthma_log("reply:" . $processContext->reply);
 
     if (strlen($processContext->reply) > 0) {
-        healthimo_sms_outgoing(
+        return healthimo_sms_outgoing(
                 $processContext->number, $processContext->reply, array('response_expected' => $processContext->response_expected,)
         );
     }
Index: healthimo_asthma/healthimo_asthma.inc
--- healthimo_asthma/healthimo_asthma.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.inc Locally Modified (Based On LOCAL)
@@ -1,9 +1,9 @@
 <?php
 
-define('DEFAULT_REPLY', 'If this is a medical emergency, call 911' );
+define('DEFAULT_REPLY', 'If this is a medical emergency, call 911');
 
-define('MESSAGE_TYPE_ZIPIT_RELIEVER', 'message_type_reliever' ); //string in zipit app
-define('MESSAGE_TYPE_ZIPIT_SURVEY', 'message_type_survey' ); //string in zipit app
+define('MESSAGE_TYPE_ZIPIT_RELIEVER', 'message_type_reliever'); //string in zipit app
+define('MESSAGE_TYPE_ZIPIT_SURVEY', 'message_type_survey'); //string in zipit app
 
 define('REQUEST_TYPE_ZONE', 'zone');
 define('REQUEST_TYPE_CONTROLLER', 'controller');
@@ -20,6 +20,8 @@
  * @return <type> user ids for all users enrolled in the asthma program
  */
 function healthimo_asthma_find_users() {
+    $admin_only_clause = variable_get('healthimo_messaging_outbound_to_admin_user_only', 1) == 1  ? " WHERE u.uid = 1" : "";
+    
     return db_query(
             "
         SELECT DISTINCT u.uid
@@ -34,15 +36,14 @@
             WHERE
             pf.name = 'profile_asthma_enrolled'
         )
-        "
+     ".$admin_only_clause
     );
 }
 
-function healthimo_asthma_log ($log, $level = WATCHDOG_DEBUG) {
+function healthimo_asthma_log($log, $level = WATCHDOG_DEBUG) {
     watchdog('healthimo_asthma', $log, NULL, $level);
 }
 
-
 /**
  * sends sms when response is not expected
  * @param <type> $user
@@ -54,7 +55,7 @@
 function healthimo_asthma_send_to_sms($user, $address, $message, $message_type) {
     //$address = DEBUG ? '2146415465' : $address;
     $address = $address;
-    healthimo_asthma_log( ' send sms to '.$address );
+    healthimo_asthma_log(' send sms to ' . $address);
     $message_nid = 0;
     $message_log = healthimo_asthma_message_log_get_default($user->uid, 2, $address, $message, $message_nid);
     $message_log->message_type = $message_type;
@@ -84,7 +85,7 @@
 function healthimo_asthma_send_to_email($user, $address, $subject, $body, $message_type) {
     //$address = DEBUG ? 'link@sandlion.com' : $address;
     $address = $address;
-    healthimo_asthma_log( ' send email to '.$address );
+    healthimo_asthma_log(' send email to ' . $address);
     $message_nid = 0;
     $message_log = healthimo_asthma_message_log_get_default($user->uid, 2, $address, $body, $message_nid);
     $message_log->message_type = $message_type;
@@ -113,13 +114,12 @@
 //    }
 
     return $status;
-
 }
 
 function healthimo_asthma_send_to_distro_list($user, $subject, $message, $message_type) {
     $status = FALSE;
 
-    if (  isset($user->profile_asthma_notification_addresses)
+    if (isset($user->profile_asthma_notification_addresses)
             && !empty($user->profile_asthma_notification_addresses)
     ) {
         $distro_list = healthimo_string_get_newline_delimited_items(trim($user->profile_asthma_notification_addresses));
@@ -127,17 +127,13 @@
         return TRUE;
     }
 
-    foreach( $distro_list as $address ) {
+    foreach ($distro_list as $address) {
         $address = trim($address);
         if (strpos($address, '@') === FALSE) {
             $status = healthimo_asthma_send_to_sms($user, $address, $message, $message_type) && $status;
         } else {
             $status = healthimo_asthma_send_to_email(
-                    $user,
-                    $address,
-                    $subject,
-                    $message,
-                    $message_type
+                            $user, $address, $subject, $message, $message_type
                     ) && $status;
         }
     }
@@ -148,7 +144,7 @@
 function healthimo_asthma_send_to_all_destinations($user, $subject, $message, $message_type) {
     $status = FALSE;
 
-    if ( healthimo_profile_has_sms($user) ) {
+    if (healthimo_profile_has_sms($user)) {
         $status = healthimo_asthma_send_to_sms($user, healthimo_profile_get_sms($user), $message, $message_type);
     }
 
Index: healthimo_asthma/healthimo_asthma.message_log.inc
--- healthimo_asthma/healthimo_asthma.message_log.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.message_log.inc Locally Modified (Based On LOCAL)
@@ -43,12 +43,9 @@
     $message_log->updated = time();
 
     if ($message_log->mid > 0) {
-        //todo x error checking?
         drupal_write_record('healthimo_asthma_message_log', $message_log, 'mid' );
     } else {
-        //todo x error checking?
         drupal_write_record('healthimo_asthma_message_log', $message_log);
-        //todo x error checking?
         $message_log->mid = db_last_insert_id('healthimo_asthma_message_log', 'mid');
     }
 
@@ -225,7 +222,6 @@
 }
 
 function healthimo_asthma_message_log_load_most_recent_request($uid) {
-    //todo x program id
     healthimo_log(' healthimo_asthma_message_log_load_most_recent_request');
     $result = db_query_range(
             "
Index: healthimo_asthma/healthimo_asthma.outbound.inc
--- healthimo_asthma/healthimo_asthma.outbound.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.outbound.inc Locally Modified (Based On LOCAL)
@@ -1,9 +1,5 @@
 <?php
 
-// 1) don't flood the sms gateway (max 120/hr)
-// 2) spread messages out over time so more 'random'
-define('MAX_TO_SEND_PER_RUN', 1);
-
 function healthimo_asthma_find_unmessaged_users() {
     healthimo_log(' healthimo_asthma_find_unmessaged_users');
     return db_query(
@@ -90,6 +86,11 @@
         return FALSE;
     }
 
+    // start a new question cycle
+    $account = healthimo_profile_save(
+            $account, 'profile_question_count', 0, PROFILE_CATEGORY_PHR
+    );
+    
     $quicktip = healthimo_asthma_get_next_message($account);
 
     return healthimo_asthma_send($account, $quicktip, $hasEmail, $hasSms);
@@ -97,13 +98,13 @@
 
 function healthimo_asthma_send_outbound_messages() {
     $usersMessaged = 0;
-
+    $healthimo_asthma_max_to_send_per_run = variable_get('healthimo_asthma_max_to_send_per_run', 1);
         $result = healthimo_asthma_find_unmessaged_users();
         if ( $result ) {
             while ($row = db_fetch_object($result)) {
                 if ( healthimo_asthma_message_user($row->uid) ) {
                     $usersMessaged++;
-                    if ( $usersMessaged >= MAX_TO_SEND_PER_RUN ) {
+                    if ( $usersMessaged >= $healthimo_asthma_max_to_send_per_run ) {
                         return $usersMessaged;
                     }
                 }
Index: healthimo_asthma/healthimo_asthma.pollen.alert.inc
--- healthimo_asthma/healthimo_asthma.pollen.alert.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.pollen.alert.inc Locally Modified (Based On LOCAL)
@@ -63,7 +63,6 @@
     $appointment_date = healthimo_date_make_local_time($appt, $tz);
     if ( $appointment_date === FALSE ) {
         return FALSE;
-        // todo * watchdog
     }
 
     $appointment_reminder_time = healthimo_date_make_local_time($appt, $tz);
@@ -91,7 +90,7 @@
 }
 
 function healthimo_asthma_send_pollen_alert_to_all_destinations($user, $level) {
-    $alert = 'todo';
+    $alert = '';
     //$level = HIGH, RED, PURPLE, etc...
     //$reminder = $user->name.' has a home visit tomorrow at '.$appointment_date->format('g').':'.$appointment_date->format('i').' '.$appointment_date->format('a').' at your home. Thanks, your home health nurse.';
     return healthimo_asthma_send_to_all_destinations($user, 'Pollen Alert', $alert, MESSAGE_TYPE_APPOINTMENT_REMINDER);
Index: healthimo_asthma/healthimo_asthma.process.inc
--- healthimo_asthma/healthimo_asthma.process.inc Base (BASE)
+++ healthimo_asthma/healthimo_asthma.process.inc Locally Modified (Based On LOCAL)
@@ -1,8 +1,8 @@
 <?php
 
 require_once 'FSM.php';
-//require_once 'FSM/GraphViz.php';
 
+//require_once 'FSM/GraphViz.php';
 //include 'HealthimoInboundMessage.php';
 //include 'HealthimoProcess.php';
 //asthma_process_test_with_controller();
@@ -153,7 +153,13 @@
 }
 
 function healthimo_asthma_process_get_controller_status($symbol, &$data) {
-    healthimo_process_reply($data, 'Lets setup your profile, do you take asthma controller medicine twice a day? (reply yes or no) (healthimo.com/t)');
+    $message_log = healthimo_asthma_message_log_get_default($data->user->uid, 4, $data->number, $data->message, 0, 0);
+    $message_log->processed = time();
+    $message_log->response_expected = 0;
+    $message_log->outbound = 0;
+    $message_log = healthimo_asthma_message_log_save($message_log);
+
+    healthimo_process_reply($data, 'Lets setup your profile, do you take asthma controller medicine twice a day? (reply yes or no)');
 }
 
 function healthimo_asthma_process_active($symbol, &$data) {
@@ -162,17 +168,31 @@
 
 function healthimo_asthma_process_request_controller_times($symbol, &$data) {
     message("healthimo_asthma_process_request_controller_times");
-    healthimo_process_reply($data, "Reply with the times of day you take your controller medicine (examples: 7am 8pm OR 8:15am 6:30pm) (healthimo.com/t)");
+    $message_log = healthimo_asthma_message_log_get_default($data->user->uid, 4, $data->number, $data->message, 0, 0);
+    $message_log->processed = time();
+    $message_log->response_expected = 0;
+    $message_log->outbound = 0;
+    $message_log = healthimo_asthma_message_log_save($message_log);
+    healthimo_process_reply($data, "Reply with the times of day you take your controller medicine (examples: 7am 8pm OR 8:15am 6:30pm)");
 }
 
 function healthimo_asthma_process_request_education_time($symbol, &$data) {
     message("healthimo_asthma_process_request_education_time");
-    healthimo_process_reply($data, "Reply with time of day you would like your asthma education (examples: 7am OR 8:15am) (healthimo.com/t)");
+    $message_log = healthimo_asthma_message_log_get_default($data->user->uid, 4, $data->number, $data->message, 0, 0);
+    $message_log->processed = time();
+    $message_log->response_expected = 0;
+    $message_log->outbound = 0;
+    $message_log = healthimo_asthma_message_log_save($message_log);
+    healthimo_process_reply($data, "Reply with time of day you would like your asthma education (examples: 7am OR 8:15am)");
 }
 
-
 function healthimo_asthma_process_receive_education_time($symbol, &$data) {
     message("healthimo_asthma_process_receive_education_time");
+    $message_log = healthimo_asthma_message_log_get_default($data->user->uid, 4, $data->number, $data->message, 0, 0);
+    $message_log->processed = time();
+    $message_log->response_expected = 0;
+    $message_log->outbound = 0;
+    $message_log = healthimo_asthma_message_log_save($message_log);
     $date_parts = HealthimoProcess::parseTimesOfDay($data->message);
     $time1 = healthimo_asthma_process_formatted_time($date_parts, 0);
     healthimo_profile_save($data->user, 'profile_asthma_feature_controller_reminder_am_time', $time1, PROFILE_CATEGORY_ASTHMA);
@@ -187,16 +207,22 @@
     $time1_ampm = $date_parts[3][$i];
     $time1_isAM = strcmp('am', $time1_ampm) == 0;
     $time1_isPM = strcmp('pm', $time1_ampm) == 0;
-    if ($time1_isPM && $time1_hour < 12 ) {
+    if ($time1_isPM && $time1_hour < 12) {
         $hour = $time1_hour + 12;
     } else {
         $hour = $time1_hour;
     }
-    return sprintf( "%02d:%02d", $hour, $time1_min );
+    return sprintf("%02d:%02d", $hour, $time1_min);
 }
 
 function healthimo_asthma_process_receive_controller_times($symbol, &$data) {
-    message("healthimo_asthma_process_receive_controller_times ". $data->user->uid);
+    message("healthimo_asthma_process_receive_controller_times " . $data->user->uid);
+    $message_log = healthimo_asthma_message_log_get_default($data->user->uid, 4, $data->number, $data->message, 0, 0);
+    $message_log->processed = time();
+    $message_log->response_expected = 0;
+    $message_log->outbound = 0;
+    $message_log = healthimo_asthma_message_log_save($message_log);
+
     $date_parts = HealthimoProcess::parseTimesOfDay($data->message);
     $time1 = healthimo_asthma_process_formatted_time($date_parts, 0);
     $time2 = healthimo_asthma_process_formatted_time($date_parts, 1);
@@ -210,7 +236,8 @@
     // Enrolled in healthimo Asthma Program
     healthimo_profile_save($data->user, 'profile_asthma_enrolled', 1, PROFILE_CATEGORY_ASTHMA);
     healthimo_profile_save($data->user, 'profile_asthma_feature_controller_reminder_active', 1, PROFILE_CATEGORY_ASTHMA);
-    healthimo_process_send_message($data, "Your healthimo asthma program profile is complete. To update anytime, text HEALTHY ASTHMA to 25827 (healthimo.com/t)");
+    healthimo_profile_save($data->user, 'profile_has_asthma_in_household', 1, PROFILE_CATEGORY_ASTHMA);
+    healthimo_process_send_message($data, "Your healthimo asthma program profile is complete. To update anytime, text HEALTHY ASTHMA to 25827");
     return HealthimoProcess::ACTIVE;
 }
 
@@ -243,51 +270,67 @@
     message("active message");
     healthimo_asthma_log("inbound message");
     $message_log_last_request = healthimo_asthma_message_log_load_most_recent_request($user->uid);
-    if ($message_log_last_request
-            &&
-            MESSAGE_TYPE_CONTROLLER_REMINDER == $message_log_last_request->message_type
-            &&
-            ( REQUEST_TYPE_ZONE == $message_log_last_request->response_type_expected
-            || REQUEST_TYPE_CONTROLLER == $message_log_last_request->response_type_expected )
-    ) {
-        // get reply, and mark response as received if reply is a valid response
-        $is_valid_response = FALSE;
-        if (REQUEST_TYPE_ZONE == $message_log_last_request->response_type_expected) {
-            $is_valid_response = is_valid_healthimo_asthma_handle_zone_response($message);
-            //reply based on content
-            $reply = healthimo_asthma_handle_zone_response($message);
-        } else if (REQUEST_TYPE_CONTROLLER == $message_log_last_request->response_type_expected) {
-            //log it
-            $is_valid_response = TRUE;
-        }
-        if ($is_valid_response) {
+//    if ($message_log_last_request
+//            &&
+//            MESSAGE_TYPE_CONTROLLER_REMINDER == $message_log_last_request->message_type
+//            &&
+//            ( REQUEST_TYPE_ZONE == $message_log_last_request->response_type_expected
+//            || REQUEST_TYPE_CONTROLLER == $message_log_last_request->response_type_expected )
+//    ) {
+//        // get reply, and mark response as received if reply is a valid response
+//        $is_valid_response = FALSE;
+//        if (REQUEST_TYPE_ZONE == $message_log_last_request->response_type_expected) {
+//            $is_valid_response = is_valid_healthimo_asthma_handle_zone_response($message);
+//            //reply based on content
+//            $reply = healthimo_asthma_handle_zone_response($message);
+//        } else if (REQUEST_TYPE_CONTROLLER == $message_log_last_request->response_type_expected) {
+//            //log it
+//            $is_valid_response = TRUE;
+//        }
+//        if ($is_valid_response) {
+//            $message_log_last_request->response_received = time();
+//            if (healthimo_asthma_message_log_save($message_log_last_request)) {
+//                healthimo_asthma_message_log_mark_all_pending_requests_received($user->uid);
+//            }
+//        }
+//    }
+
+
+    if ($message_log_last_request) {
+        // save raw message inbound, may save again later more correlated/parsed etc...
+        $message_log = healthimo_asthma_message_log_get_default($user->uid, 4, $data->number, $message, 0, 0);
+        $message_log->processed = time();
+        $message_log->response_expected = 0;
+        $message_log->outbound = 0;
+        $message_log = healthimo_asthma_message_log_save($message_log);
+
+        // request specific
             $message_log_last_request->response_received = time();
             if (healthimo_asthma_message_log_save($message_log_last_request)) {
                 healthimo_asthma_message_log_mark_all_pending_requests_received($user->uid);
             }
+        //no more zone replies, for oat, ask another question instead. 
+        //healthimo_process_reply($data, $reply);
+        // don't ask here, 
+        // will flow through to hfstx module next.
+        // if this was an fstx question, not a zone question, then will trigger further questions
+        // hfstx_ask_question($user, $number);
         }
-    } else {
-        $reply = DEFAULT_REPLY;
-        watchdog('healthimo_asthma_inbound', 'Default reply sent message=[%msg], user=%uid', array('%msg' => $message, '%uid' => $user->uid), WATCHDOG_ALERT
-        );
     }
 
-    healthimo_process_reply($data, $reply);
-}
-
 function healthimo_asthma_process_survey($symbol, &$data) {
     message("healthimo_asthma_process_survey");
 
-    //TODO no longer active controller reminders
+    // no longer active controller reminders
     //    $user->profile_asthma_feature_controller_reminder_active == 0;        
 
     message("Survey process (sub process)");
-    healthimo_process_reply($data, "Thank you for participating in the healthimo asthma program. Please reply with any comments you have. (healthimo.com/t)");
+    healthimo_process_reply($data, "Thank you for participating in the healthimo asthma program. Please reply with any comments you have.");
 }
 
 function healthimo_asthma_process_end($symbol, &$data) {
     message("healthimo_asthma_process_end");
-    message("healthimo_asthma_process_end survey[".$data->message."]");
+    message("healthimo_asthma_process_end survey[" . $data->message . "]");
 }
 
 /////////////////// helpers
Index: healthimo_asthma/tests/healthimo_asthma.pollen.alert.test
--- healthimo_asthma/tests/healthimo_asthma.pollen.alert.test Base (BASE)
+++ healthimo_asthma/tests/healthimo_asthma.pollen.alert.test Locally Modified (Based On LOCAL)
@@ -33,11 +33,11 @@
     }
 
     function testFetchAndParseNabDate() {
-        //todo * make sure date is today
+        // make sure date is today
         $page = file_get_contents(DALLAS_NAB_URL);
         $item = trim(between('Date:', '</strong></td>', $page, FALSE));
         $this->pass($item );
-        //todo * put in dynamic date
\ No newline at end of file
+        // put in dynamic date
\ No newline at end of file
         $this->assertEqual( 'June 22, 2010', $item );
         $this->assertTrue(true);
     }
Index: hfstx/hfstx.admin.inc
--- hfstx/hfstx.admin.inc Base (BASE)
+++ hfstx/hfstx.admin.inc Locally Modified (Based On LOCAL)
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * Implementation of hook_admin_settings() for configuring the module
  */
@@ -15,6 +16,60 @@
     '#default_value' => variable_get('hfstx_cron_active', 1),
     '#description' => t('Enables / disable cron for the module.')
   );
+    $form['settings']['hfstx_min_message_interval_days_for_request'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Min days between requests (regardless of messages sent out)'),
+        '#default_value' => variable_get('hfstx_min_message_interval_days_for_request', 7),
+        '#description' => t('hfstx_min_message_interval_days_for_request')
+    );
+    $form['settings']['hfstx_min_times_to_send_before_first_request'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Min numbers of outbound messages (education) before first request'),
+        '#default_value' => variable_get('hfstx_min_times_to_send_before_first_request', 4),
+        '#description' => t('hfstx_min_times_to_send_before_first_request')
+    );
+    $form['settings']['hfstx_window_start_hour'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Sending window - start hour'),
+        '#default_value' => variable_get('hfstx_window_start_hour', 8),
+        '#description' => t('hfstx_window_start_hour')
+    );
+    $form['settings']['hfstx_window_end_hour'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Sending window - end hour'),
+        '#default_value' => variable_get('hfstx_window_end_hour', 20),
+        '#description' => t('hfstx_window_end_hour')
+    );
+    $form['settings']['hfstx_min_message_interval_days'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Min days between messages'),
+        '#default_value' => variable_get('hfstx_min_message_interval_days', 3),
+        '#description' => t('hfstx_min_message_interval_days')
+    );
+    $form['settings']['hfstx_max_to_send_per_run'] = array(
+        '#type' => 'textfield',
+        '#cols' => 20,
+        '#maxlength' => 20,
+        '#required' => TRUE,
+        '#title' => t('Max users to messsage per cron run'),
+        '#default_value' => variable_get('hfstx_max_to_send_per_run', 1),
+        '#description' => t('hfstx_max_to_send_per_run')
+    );
   return system_settings_form($form);
 }
 
Index: hfstx/hfstx.inbound.inc
--- hfstx/hfstx.inbound.inc Base (BASE)
+++ hfstx/hfstx.inbound.inc Locally Modified (Based On LOCAL)
@@ -1,30 +1,28 @@
 <?php
 
-define('REPLY_KEYWORD_HEALTHY_START', 'Thank you for restarting your healthimo programs! (healthimo.com/t)');
-define('REPLY_KEYWORD_HEALTHY', 'Welcome to Healthy Families, invite a friend! healthimo.com/t');
+define('REPLY_KEYWORD_HEALTHY_START', 'Thank you for restarting your healthy family programs!');
+define('REPLY_KEYWORD_HEALTHY', 'Welcome to Healthy Families, invite a friend!');
 define('REPLY_KEYWORD_HEALTHY_BCBS', 'Thank you for your interest in your health plan sponsored program. A Care Specialist will contact you soon with more information.');
-define('REPLY_KEYWORD_HEALTHY_CCISD', 'Welcome to Healthy Families for CCISD! Invite a friend - healthimo.com');
-define('REPLY_KEYWORD_HEALTHY_MOM', 'Welcome to Healthy Families for Mission of Mercy! Invite a friend - healthimo.com/t');
-define('REPLY_KEYWORD_HEALTHY_FLINT_HILLS', 'Welcome to Healthy Families for Flint Hills! Invite a friend - healthimo.com/t');
-define('REPLY_KEYWORD_HEALTHY_TAMUCC', 'Welcome to Healthy Families for TAMUCC! Invite a friend - healthimo.com/t');
-define('REPLY_KEYWORD_HEALTHY_HEB', 'Welcome to Healthy Families for HEB! Invite a friend - healthimo.com/t');
-define('REPLY_KEYWORD_HEALTHY_WALMART', 'Welcome to Healthy Families for Walmart! Invite a friend - healthimo.com/t');
+define('REPLY_KEYWORD_HEALTHY_CCISD', 'Welcome to Healthy Families for CCISD! Invite a friend');
+define('REPLY_KEYWORD_HEALTHY_MOM', 'Welcome to Healthy Families for Mission of Mercy! Invite a friend');
+define('REPLY_KEYWORD_HEALTHY_FLINT_HILLS', 'Welcome to Healthy Families for Flint Hills! Invite a friend');
+define('REPLY_KEYWORD_HEALTHY_TAMUCC', 'Welcome to Healthy Families for TAMUCC! Invite a friend');
+define('REPLY_KEYWORD_HEALTHY_HEB', 'Welcome to Healthy Families for HEB! Invite a friend');
+define('REPLY_KEYWORD_HEALTHY_WALMART', 'Welcome to Healthy Families for Walmart! Invite a friend');
 define('REPLY_KEYWORD_BCBS', 'Thanks, you\'re now enrolled in the healthimo bcbs program, TX ONLY fully covered modern, convenient diabetes education program!');
 define('REPLY_KEYWORD_TTUHSCPB', 'Welcome to the healthimo program for TTUHSC PB members! One of our care specialists will contact you to set up your custom program');
 define('REPLY_KEYWORD_CHALLENGE', 'Congrats! You have pre-registered for the 2011 Fit & Free By the Sea 6-Month Challenge starting in January. More texts coming soon!');
-define('REPLY_KEYWORD_HEALTHY_ASTHMA', 'Lets setup your profile, do you take asthma controller medicine twice a day? (reply yes or no) healthimo.com/t');
+define('REPLY_KEYWORD_HEALTHY_ASTHMA', 'Lets setup your profile, do you take asthma controller medicine twice a day? (reply yes or no)');
 //define('REPLY_KEYWORD_HEALTHY_ASTHMA', 'Thank you.  You are now in the healthimo asthma program and will begin getting asthma education on your phone.');
 define('REPLY_KEYWORD_HEALTHY_ASTHMA_SPANISH', 'Gracias. Ahora se encuentra en el programa de asma healthimo y comenzara a recibir educacion sobre el asma en su telefono.');
 
-//todo X write test
-function hfstx_process_incoming_sms($user, $number, $message) {
+function hfstx_process_incoming_sms($user, $number, $message, $isKeyword = false) {
     global $user;
     // set $reply and that will be returned to the user as a txt
     $reply = NULL;
     if ($user->uid > 0) {
-        $reply = hfstx_sms_handle_existing_user($number, $message);
+        $reply = hfstx_sms_handle_existing_user($number, $message, $isKeyword);
     } else {
-        //todo x move new_user functionality to healthimo keyword mgmt module
         $reply = hfstx_sms_handle_new_user($number, $message);
     }
 
@@ -44,8 +42,7 @@
     ;
 }
 
-//todo X write test
-function hfstx_sms_handle_existing_user($number, $message) {
+function hfstx_sms_handle_existing_user($number, $message, $isKeyword = false) {
     global $user;
     $reply = NULL;
 
@@ -57,19 +54,16 @@
         $message_log->processed = time();
         $message_log = hfstx_message_log_save($message_log);
 
-        // replies take precedence over keywords, so check for pending reply first
+        if ($isKeyword == true) {
+            // we know this is a 'healthy' ... so process it as keyword only
+            // nb: if first word of a response is healthy, it will be processed as a keyword
+            $reply = hfstx_sms_manage_keywords($number, $message);
+        } else {
         $message_log_last_request = hfstx_message_log_load_most_recent_request($user->uid);
         if ($message_log_last_request) {
-            $reply = hfstx_sms_process_reply_for_data_request($user, $message, $message_log_last_request);
-        } else {
-            $reply = hfstx_sms_manage_keywords($number, $message);
-            // TODO 
-//            if (empty($reply)) {
-//                watchdog('hfstx_inbound', 'Message not reply or keyword message=[%msg], user=%uid', array('%msg' => $message, '%uid' => $user->uid), WATCHDOG_ALERT
-//                );
-//                //todo X default reply
-//            }
+                $reply = hfstx_sms_process_reply_for_data_request($number, $user, $message, $message_log_last_request);
         }
+        }
     } else if (healthimo_asthma_is_enrolled($user)) {
         $reply = hfstx_sms_manage_keywords($number, $message);
     } else {
@@ -79,10 +73,9 @@
     return $reply;
 }
 
-//todo X write test
-function hfstx_sms_process_reply_for_data_request($user, $message, $message_log_last_request) {
+function hfstx_sms_process_reply_for_data_request($number, $user, $message, $message_log_last_request) {
     $value = $message;
-    $cat = hfstx_sms_find_profile_category($user, $message_log_last_request);
+//$cat = hfstx_sms_find_profile_category($user, $message_log_last_request);
     // save the reply to the correct profile field category
     $user = healthimo_profile_save(
             $user, $message_log_last_request->response_type_expected, $value, $cat
@@ -93,40 +86,105 @@
         if (hfstx_message_log_save($message_log_last_request)) {
             hfstx_message_log_mark_all_pending_requests_received($user->uid);
         }
+
+        $sentAsthmaProfileQuestion = false;
+
+        if ($message_log_last_request->response_type_expected == 'profile_diabetes_asthma_in_home') {
+// message is already cleaned and lowercased upstream
+            $words = healthimo_string_get_words($value);
+// log message
+            if (in_array('d', $words) && strcmp('d', $words[0]) == 0) {
+                $user = healthimo_profile_save(
+                        $user, 'profile_has_diabetes_in_household', 1, NULL
+                );
+                $user = healthimo_profile_save(
+                        $user, 'profile_areas_of_interest_diabetes', 1, NULL
+                );
+            } else if (in_array('a', $words) && strcmp('a', $words[0]) == 0) {
+                $user = healthimo_profile_save(
+                        $user, 'profile_has_asthma_in_household', 1, NULL
+                );
+                hfstx_kickoff_asthma_profile($user, $number);
+                $sentAsthmaProfileQuestion = true;
+            } else if (in_array('b', $words) && strcmp('b', $words[0]) == 0) {
+                $user = healthimo_profile_save(
+                        $user, 'profile_has_diabetes_in_household', 1, NULL
+                );
+                $user = healthimo_profile_save(
+                        $user, 'profile_areas_of_interest_diabetes', 1, NULL
+                );
+                $user = healthimo_profile_save(
+                        $user, 'profile_has_asthma_in_household', 1, NULL
+                );
+                hfstx_kickoff_asthma_profile($user, $number);
+                $sentAsthmaProfileQuestion = true;
+            }
+        }
+
+        if ($sentAsthmaProfileQuestion == false) {
+            hfstx_ask_question($user, $number);
+        }
     } else {
         watchdog('hfstx_inbound', 'Error saving reply for message=[%msg], user=%uid', array('%msg' => $message, '%uid' => $user->uid), WATCHDOG_ALERT
         );
     }
+
+
     return NULL; //no replies for these right now
 }
 
-//todo X write test
-function hfstx_sms_find_profile_category($user, $message_log_last_request) {
-    $cat = NULL;
-
-    if (array_key_exists(
-                    $message_log_last_request->response_type_expected, healthimo_profile_save_get_edit_array($user, PROFILE_CATEGORY_PERSONAL_INFO)
-            )
+function hfstx_kickoff_asthma_profile($user, $number) {
+    if (!isset($account->profile_keyword_asthma)
+            || empty($account->profile_keyword_asthma)
+            || $account->profile_keyword_asthma == 0
     ) {
-        $cat = PROFILE_CATEGORY_PERSONAL_INFO;
-    } elseif (array_key_exists(
-                    $message_log_last_request->response_type_expected, healthimo_profile_save_get_edit_array($user, PROFILE_CATEGORY_PHR)
-            )
-    ) {
-        $cat = PROFILE_CATEGORY_PHR;
-    } else {
-        watchdog('hfstx_inbound', 'Reply field not found for response type=%rt, category=%cat, user=%uid', array(
-            '%rt' => $message_log_last_request->response_type_expected,
-            '%cat' => $cat,
-            '%uid' => $user->uid
-                ), WATCHDOG_ALERT
+        healthimo_profile_save($user, 'profile_asthma_process_state', HealthimoProcess::REQUEST_CONTROLLER_STATUS, PROFILE_CATEGORY_ASTHMA);
+        healthimo_profile_save($user, 'profile_asthma_enrolled', 0, PROFILE_CATEGORY_ASTHMA);
+        healthimo_profile_save($user, 'profile_asthma_feature_controller_reminder_active', 0, PROFILE_CATEGORY_ASTHMA);
+        healthimo_profile_save($user, 'profile_keyword_asthma', 1, NULL);
+        healthimo_profile_save($user, 'profile_keyword_healthy', 1, NULL);
+        $message_log = healthimo_asthma_message_log_get_default($user->uid, 4, $number, $message, 0);
+        $message_log->outbound = 0;
+        healthimo_asthma_message_log_save($message_log);
+        $message_log = healthimo_asthma_message_log_get_default($user->uid, 4, $number, REPLY_KEYWORD_HEALTHY_ASTHMA, 0, 1, 1);
+        healthimo_asthma_message_log_save($message_log);
+        healthimo_sms_outgoing(
+                $number, REPLY_KEYWORD_HEALTHY_ASTHMA, array('response_expected' => 1,)
         );
-    }
 
-    return $cat;
+// set question count to ~'high values'
+// so no hfstx questions are asked during the enrollment session
+// will be reset to 0 on next cron initiated message send
+        $account = healthimo_profile_save(
+                $account, 'profile_question_count', 99, PROFILE_CATEGORY_PHR
+        );
 }
+}
 
-//todo X write test
+//function hfstx_sms_find_profile_category($user, $message_log_last_request) {
+//    $cat = NULL;
+//
+//    if (array_key_exists(
+//                    $message_log_last_request->response_type_expected, healthimo_profile_save_get_edit_array($user, PROFILE_CATEGORY_PERSONAL_INFO)
+//            )
+//    ) {
+//        $cat = PROFILE_CATEGORY_PERSONAL_INFO;
+//    } elseif (array_key_exists(
+//                    $message_log_last_request->response_type_expected, healthimo_profile_save_get_edit_array($user, PROFILE_CATEGORY_PHR)
+//            )
+//    ) {
+//        $cat = PROFILE_CATEGORY_PHR;
+//    } else {
+//        watchdog('hfstx_inbound', 'Reply field not found for response type=%rt, category=%cat, user=%uid', array(
+//            '%rt' => $message_log_last_request->response_type_expected,
+//            '%cat' => $cat,
+//            '%uid' => $user->uid
+//                ), WATCHDOG_ALERT
+//        );
+//    }
+//
+//    return $cat;
+//}
 function hfstx_sms_update_keyword($keywordField) {
     global $user;
 
@@ -139,7 +197,6 @@
     return $user;
 }
 
-//todo X write test
 function hfstx_sms_handle_new_user($number, $message) {
     global $user;
     $user = hfstx_sms_create_new_account($number);
@@ -152,7 +209,6 @@
     }
 }
 
-//todo X write test
 function hfstx_sms_manage_keywords($number, $message) {
     global $user;
     //$is_enrolled_healthy = hfstx_is_enrolled_in_hfstx($user);
@@ -177,7 +233,8 @@
             healthimo_profile_save($user, 'profile_asthma_process_state', HealthimoProcess::REQUEST_CONTROLLER_STATUS, PROFILE_CATEGORY_ASTHMA);
             healthimo_profile_save($user, 'profile_asthma_enrolled', 0, PROFILE_CATEGORY_ASTHMA);
             healthimo_profile_save($user, 'profile_asthma_feature_controller_reminder_active', 0, PROFILE_CATEGORY_ASTHMA);
-            hfstx_sms_update_keyword('profile_keyword_asthma');
+            healthimo_profile_save($user, 'profile_keyword_asthma', 1, NULL);
+            healthimo_profile_save($user, 'profile_keyword_healthy', 1, NULL);
             $message_log = healthimo_asthma_message_log_get_default($user->uid, 4, $number, $message, 0);
             $message_log->outbound = 0;
             healthimo_asthma_message_log_save($message_log);
@@ -232,10 +289,8 @@
                 $number, $reply, array('response_expected' => $response_expected,)
         );
     }
-
 }
 
-//todo X write test
 function hfstx_sms_reply($user, $reply) {
     if (!empty($reply)) {
         watchdog('hfstx', 'hfstx_sms_reply to %uid %reply', array('%uid' => $user->uid, '%reply' => $reply));
@@ -244,7 +299,6 @@
     }
 }
 
-//todo X write test
 function hfstx_sms_create_new_account($number) {
     $sms_user[0] = array(
         status => 2,
Index: hfstx/hfstx.message.inc
--- hfstx/hfstx.message.inc Base (BASE)
+++ hfstx/hfstx.message.inc Locally Modified (Based On LOCAL)
@@ -1,15 +1,15 @@
 <?php
 
-define('MIN_MESSAGE_INTERVAL_DAYS_FOR_REQUEST', 10);
-define('MIN_TIMES_TO_SEND_BEFORE_FIRST_REQUEST', 4);
+define('MIN_MESSAGE_INTERVAL_DAYS_FOR_REQUEST', 0);
+define('MIN_TIMES_TO_SEND_BEFORE_FIRST_REQUEST', 0);
 
 function hfstx_get_next_message($account) {
-    healthimo_log( "hfstx_message_get_next_message=" .$account->uid);
+    healthimo_log("hfstx_message_get_next_message=" . $account->uid);
 
     // function taxonomy_get_vocabularies($type = NULL) {
-    $program_tid = 1;//todo x lookup $program_tid
+    $program_tid = 1; // lookup $program_tid
 
-    if ( hfstx_is_time_to_ask($account) ) {
+    if (hfstx_is_time_to_ask($account)) {
         $quicktipDataRequest = hfstx_get_next_request_message($account, $program_tid);
         if ($quicktipDataRequest) {
             return $quicktipDataRequest;
@@ -19,16 +19,14 @@
     return hfstx_get_next_education_message($account, $program_tid);
 }
 
-//todo X function hfstx_is_time_to_ask($account) {
 function hfstx_is_time_to_ask($account) {
     $timeToAskForSomething = FALSE;
     $most_recent_request_message_log = hfstx_message_log_load_most_recent_request($account->uid);
 
-    if ( $most_recent_request_message_log ) {
-        $timeToAskForSomething = healthimo_date_is_diff_n_or_more_days(
-                $most_recent_request_message_log->created,
-                time(),
-                MIN_MESSAGE_INTERVAL_DAYS_FOR_REQUEST);
+    if ($most_recent_request_message_log) {
+        $timeToAskForSomething = MIN_MESSAGE_INTERVAL_DAYS == 0 ? TRUE :
+                healthimo_date_is_diff_n_or_more_days(
+                        $most_recent_request_message_log->created, time(), MIN_MESSAGE_INTERVAL_DAYS_FOR_REQUEST);
     } else {
         $sent_count = hfstx_message_log_count_sent($account->uid);
         $timeToAskForSomething = $sent_count >= MIN_TIMES_TO_SEND_BEFORE_FIRST_REQUEST;
@@ -38,91 +36,113 @@
 }
 
 function hfstx_get_next_request_message($account, $program_tid) {
+    $quicktip = hfstx_find_question($account);
+    return $quicktip->message_nid == 0 ? $quicktip : FALSE;
+}
+
+function hfstx_find_profile_fields_of_interest(&$account) {
+    healthimo_log("hfstx_find_profile_fields_of_interest uid=" . $account->uid);
+
+    $fields = array();
+
+    // get all the questions that might apply to me
+    $categories = array('general');
+    if (isset($account->profile_has_asthma_in_household)
+            && !empty($account->profile_has_asthma_in_household)
+            && $account->profile_has_asthma_in_household == 1
+    ) {
+        $categories[] = 'asthma';
+    }
+
+    if (isset($account->profile_has_diabetes_in_household)
+            && !empty($account->profile_has_diabetes_in_household)
+            && $account->profile_has_diabetes_in_household == 1
+    ) {
+        $categories[] = 'diabetes';
+    }
+    
+    
+//    foreach ($categories as $c) {
+//        healthimo_log("hfstx_find_profile_fields_of_interest categories=". $c);
+//    }
+
+    // see which of these fields are not set for me yet
+    $result = db_query(
+            "
+            select  profile_field_name 
+            from    profile_field_question 
+            where   category in ("
+            .
+            db_placeholders($categories, 'varchar')
+            .
+            ");", $categories
+    );
+
+    if ($result) {
+        while ($row = db_fetch_object($result)) {
+            // variable variable using field name $a->$b
+            $f = $row->profile_field_name;
+            if (empty($account->$f)) {
+                // this one is needed
+                $fields[] = $f;
+            }
+        }
+    }
+
+    return $fields;
+}
+
+function hfsx_find_questions_by_least_asked($account, $fields) {
+    $result = db_query_range(
+            "
+			select 
+			name as profile_field_name, 
+			max(created) as created, 
+			(select ordinal  from profile_field_question pfq where pfq.profile_field_name = x.name) as ordinal, 
+			(select question from profile_field_question pfq where pfq.profile_field_name = x.name) as question 
+			from (
+			select pf.fid, pf.name, m.created from profile_fields pf left outer join hfstx_message_log m on m.response_type_expected = pf.name 
+			and m.uid = %d order by pf.fid asc) as x 
+			where name in ("
+            .
+            db_placeholders($fields, 'varchar')
+            .
+            ") 
+			group by name order by created, ordinal         
+            ", array_merge(array($account->uid), $fields), 0, 1
+    );
+    return $result ? db_fetch_object($result) : FALSE;
+}
+
+function hfstx_find_question(&$account) {
+    healthimo_log("hfstx_find_question uid=" . $account->uid);
+
     $quicktip = hfstx_message_log_get_default(
-            $account->uid, $program_tid, 'address not set yet',
-            'message not set yet', -1,
-            1, 1
+            $account->uid, 1, 'address not set yet', 'message not set yet', -1, 1, 1
     );
-    //todo x ideally randomize these or soemthing, don't get stuck on same request; could put UNKNOWN in field to bypass
-    //todo x for now don't pull these from db no need to, just push new code if have to change the text
-    // These are prepended with:
-    //'Update your profile '
-    //'Reply '
-    if ( empty( $account->profile_zip_code ) ) {
+
+    $fields = hfstx_find_profile_fields_of_interest($account);
+
+    if (count($fields) > 0) {
+        $result = hfsx_find_questions_by_least_asked($account, $fields);
+        if ($result) {
         $quicktip->message_nid = 0;
-        $quicktip->message = 'with your zip code for a local version of Healthy Families!';
-        $quicktip->response_type_expected = 'profile_zip_code';
-    } else if ( empty( $account->profile_goal ) ) {
-        $quicktip->message_nid = 0;
-        $quicktip->message = 'with your Healthy Families goal for this year. Commit to your goal now! hfstx.org';
-        $quicktip->response_type_expected = 'profile_goal';
-    } else if ( empty( $account->profile_activity ) ) {
-        $quicktip->message_nid = 0;
-        $quicktip->message = 'with your activity! Research shows that 3 ten minute walks are just as good for you as 1 thirty minute walk.';
-        $quicktip->response_type_expected = 'profile_activity';
-    } else if ( empty( $account->profile_areas_of_interest_reply ) ) {
-        $quicktip->message_nid = 0;
-        $quicktip->message = 'with any health conditions you are interested in to customize Healthy Families with specific tips!';
-        $quicktip->response_type_expected = 'profile_areas_of_interest_reply';
-    } else if ( $account->profile_areas_of_interest_diabetes ) {
-        // diabetes specific requests
-        if ( empty( $account->profile_last_12mos_a1c_count ) ) {
-            // % patients > 1 a1c per year
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with the number of A1c tests you\'ve had in the last 12 months.';
-            $quicktip->response_type_expected = 'profile_last_12mos_a1c_count';
-        } else if ( empty( $account->profile_most_recent_a1c ) ) {
-            // % patients w/ highest risk glucose level
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with your most recent A1c laboratory test result  (or never had one).';
-            $quicktip->response_type_expected = 'profile_most_recent_a1c';
-        } else if ( empty( $account->profile_last_kidney_checkup ) ) {
-            // % assessed for nephrology
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with the last year you were seen by a doctor about the health of your kidneys  (or never).';
-            $quicktip->response_type_expected = 'profile_last_kidney_checkup';
-        } else if ( empty( $account->profile_last_lipid_profile ) ) {
-            // % receiving a lipid profile once in 2 yrs
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with the last year you had a lipid profile (or never)';
-            $quicktip->response_type_expected = 'profile_last_lipid_profile';
-        } else if ( empty( $account->profile_ldl_cholesterol ) ) {
-            // % with ldl cholesterol of < 130 mg/dl
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with your ldl cholesterol level (the bad kind).';
-            $quicktip->response_type_expected = 'profile_ldl_cholesterol';
-        } else if ( empty( $account->profile_bp_reading ) ) {
-            // % with blood pressure of < 140/90
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with your last blood pressure reading (140/90 for example, or none).';
-            $quicktip->response_type_expected = 'profile_bp_reading';
-        } else if ( empty( $account->profile_last_dilated_eye_exam ) ) {
-            // % receiving periodic dialated eye exam
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with the last year you had a dialated eye exam (or never).';
-            $quicktip->response_type_expected = 'profile_last_dilated_eye_exam';
-        } else if ( empty( $account->profile_last_foot_exam ) ) {
-            // % receiving annual foot exam
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'with the last year you had a foot exam (or never).';
-            $quicktip->response_type_expected = 'profile_last_foot_exam';
-        } else if ( empty( $account->profile_had_smoking_cessation_counseling ) ) {
-            // % receiving counseling on smoking cessation
-            $quicktip->message_nid = 0;
-            $quicktip->message = 'yes if you smoke and have received counseling about stopping smoking.';
-            $quicktip->response_type_expected = 'profile_had_smoking_cessation_counseling';
+            $quicktip->message = $result->question;
+            $quicktip->response_type_expected = $result->profile_field_name;
+            // take the first one only
+            return $quicktip;
         }
     }
 
-    return $quicktip->message_nid == 0 ? $quicktip : FALSE;
-
+    // return default quicktip
+    return $quicktip;
 }
 
 function hfstx_get_next_education_message($account, $program_tid) {
     // get term based on profile area of interest
     // diabetes or general health for now
-    if ( isset( $account->profile_areas_of_interest_diabetes )
-            && !empty( $account->profile_areas_of_interest_diabetes )
+    if (isset($account->profile_areas_of_interest_diabetes)
+            && !empty($account->profile_areas_of_interest_diabetes)
             && $account->profile_areas_of_interest_diabetes == 1
     ) {
         $term_name = 'diabetes';
@@ -136,58 +156,47 @@
     $lastOrdinal = 0;
     $most_recent_educational_message_log =
             hfstx_message_log_load_most_recent_sent_education($account->uid);
-    if ( $most_recent_educational_message_log ) {
+    if ($most_recent_educational_message_log) {
         $mostRecentQuicktipNode =
                 healthimo_quicktip_load($most_recent_educational_message_log->message_nid);
         $lastOrdinal =
-                !empty($mostRecentQuicktipNode->field_ordinal_value)
-                ? $mostRecentQuicktipNode->field_ordinal_value : 0;
-        healthimo_log( 'mostRecentQuicktipNode ' .$mostRecentQuicktipNode->field_ordinal_value);
+                !empty($mostRecentQuicktipNode->field_ordinal_value) ? $mostRecentQuicktipNode->field_ordinal_value : 0;
+        healthimo_log('mostRecentQuicktipNode ' . $mostRecentQuicktipNode->field_ordinal_value);
     }
 
-    //todo X only get message if it's > start interval
+    // only get message if it's > start interval
     //;
     // if $lastOrdinal == 0 &&  $account->created, time() < MESSAGING_START_DELAY return FALSE
-
-    //todo x consider changing $tid (diff category) w/ previous last ordinal
+    //consider changing $tid (diff category) w/ previous last ordinal
     $quicktipNode = healthimo_quicktip_load_next_in_series($tid, $lastOrdinal);
     healthimo_log(
             'hfstx_get_next_education_message'
-            .' most recent ['
-            .isset($most_recent_educational_message_log->mid) && !empty($most_recent_educational_message_log->mid) ? $most_recent_educational_message_log->mid : null
-            .', '
-            .isset($most_recent_educational_message_log->message_nid) && !empty($most_recent_educational_message_log->message_nid) ? $most_recent_educational_message_log->message_nid : null
-            .', '
-            .$lastOrdinal
-            .'] new message ['
-            .$tid
-            .','
-            .$quicktipNode->nid
-            .','
-            .$quicktipNode->title
-            .']'
+            . ' most recent ['
+            . isset($most_recent_educational_message_log->mid) && !empty($most_recent_educational_message_log->mid) ? $most_recent_educational_message_log->mid : null
+                    . ', '
+                    . isset($most_recent_educational_message_log->message_nid) && !empty($most_recent_educational_message_log->message_nid) ? $most_recent_educational_message_log->message_nid : null
+                            . ', '
+                            . $lastOrdinal
+                            . '] new message ['
+                            . $tid
+                            . ','
+                            . $quicktipNode->nid
+                            . ','
+                            . $quicktipNode->title
+                            . ']'
     );
 
-    if ( $quicktipNode ) {
+    if ($quicktipNode) {
         return hfstx_message_log_get_default(
-                $account->uid,
-                $program_tid,
-                'address not set yet',
-                $quicktipNode->title,
-                $quicktipNode->nid,
-                1,
-                0
+                $account->uid, $program_tid, 'address not set yet', $quicktipNode->title, $quicktipNode->nid, 1, 0
         );
     } else {
         watchdog(
-                'hfstx',
-                'Could not get quicktip! (tid=%tid lastOrdinal=%lastOrdinal uid=%uid)',
-                array(
+                'hfstx', 'Could not get quicktip! (tid=%tid lastOrdinal=%lastOrdinal uid=%uid)', array(
                 '%tid' => $tid,
                 '%lastOrdinal' => $lastOrdinal,
                 '%uid' => $account->uid,
-                ),
-                WATCHDOG_ALERT
\ No newline at end of file
+                ), WATCHDOG_ALERT
\ No newline at end of file
         );
         return FALSE;
     }
Index: hfstx/hfstx.message_log.inc
--- hfstx/hfstx.message_log.inc Base (BASE)
+++ hfstx/hfstx.message_log.inc Locally Modified (Based On LOCAL)
@@ -46,12 +46,9 @@
     $message_log->updated = time();
 
     if ($message_log->mid > 0) {
-        //todo x error checking?
         drupal_write_record(TABLE_MESSAGE_LOG, $message_log, TABLE_MESSAGE_LOG_KEY );
     } else {
-        //todo x error checking?
         drupal_write_record(TABLE_MESSAGE_LOG, $message_log);
-        //todo x error checking?
         $message_log->mid = db_last_insert_id(TABLE_MESSAGE_LOG, TABLE_MESSAGE_LOG_KEY);
     }
 
@@ -164,7 +161,6 @@
 }
 
 function hfstx_message_log_load_most_recent_request($uid) {
-    //todo x program id
     healthimo_log(' hfstx_message_log_load_most_recent_request');
     $result = db_query_range(
             "
Index: hfstx/hfstx.module
--- hfstx/hfstx.module Base (BASE)
+++ hfstx/hfstx.module Locally Modified (Based On LOCAL)
@@ -71,14 +71,14 @@
  * Implementation of hook_cron().
  * 
  * 
- * todo x manage cron timeout
+ * manage cron timeout
   //(limit n)?  must stay in the cron timeout, so do small frequently
   // count rows processed in loops and bail if hit n rows in each?
   // 2 loops == 2*n == total possible
   /// **** is this an issue if we run cron via a script?
   // or increase the request timeout to x minutes?
  *
- * todo x notify support where hfstx_message_log.procssed = null
+ * notify support where hfstx_message_log.procssed = null
   // or just a query that reports on unprocessed + drupal errors?
   //   this will have to be cron so doesn't not run because this breaks
   //        $result = hfstx_find_candidate_messaged_users();
Index: hfstx/hfstx.outbound.inc
--- hfstx/hfstx.outbound.inc Base (BASE)
+++ hfstx/hfstx.outbound.inc Locally Modified (Based On LOCAL)
@@ -1,44 +1,36 @@
 <?php
 
-// limit sending messages to hours between start/end hours
-define('WINDOW_START_HOUR', 8);
-define('WINDOW_END_HOUR',   20);
-
-// min number of days between messages
-define('MIN_MESSAGE_INTERVAL_DAYS', 3);
-
-
-// 1) don't flood the sms gateway (max 120/hr)
-// 2) spread messages out over time so more 'random'
-define('MAX_TO_SEND_PER_RUN', 1);
-
 /**
  * @return <type> true if current hour of day is in sending window
  */
 function hfstx_is_in_sending_window() {
-    healthimo_log( 'hfstx_is_in_sending_window ' .WINDOW_START_HOUR .'-' .WINDOW_END_HOUR);
+    $hfstx_window_start_hour = variable_get('hfstx_window_start_hour', 8);
+    $hfstx_window_end_hour = variable_get('hfstx_window_end_hour', 20);
+    healthimo_log('hfstx_is_in_sending_window ' . $hfstx_window_start_hour . '-' . $hfstx_window_end_hour);
     return
             healthimo_date_is_in_window_hours(
-            time(),
-            WINDOW_START_HOUR,
-            WINDOW_END_HOUR,
-            "America/Chicago"
+            time(), $hfstx_window_start_hour, $hfstx_window_end_hour, "America/Chicago"
     );
 }
 
 function hfstx_find_unmessaged_users() {
     healthimo_log(' hfstx_find_unmessaged_users');
+    $admin_only_clause = variable_get('healthimo_messaging_outbound_to_admin_user_only', 1) == 1 ? " AND u.uid = 1" : "";
+
     return db_query(
             "
         SELECT DISTINCT u.uid
         FROM {users} u
         JOIN {profile_values} pv
             ON pv.uid = u.uid
-        LEFT OUTER JOIN {" .TABLE_MESSAGE_LOG ."} hfml
+        LEFT OUTER JOIN {" . TABLE_MESSAGE_LOG . "} hfml
             ON hfml.uid = u.uid
         WHERE NOT EXISTS (
             SELECT 1 FROM {hfstx_message_log} hfml2 WHERE hfml2.uid = u.uid
         )
+        " .
+            $admin_only_clause
+            . "
         AND
         pv.value = 1
         AND
@@ -55,25 +47,29 @@
 }
 
 /**
- * NB: if we haven't processed in the last MIN_MESSAGE_INTERVAL_DAYS * 4 days,
+ * NB: if we haven't processed in the last $hfstx_min_message_interval_days * 4 days,
  * then the query will have to look back further.
- * @return <type> users that have had a message_log created in the last 30 days
+ * Why time based not just 'ever' with exists?
+ * @return <type> users that have had a message_log created in the last 365 days
  */
 function hfstx_find_candidate_messaged_users() {
     healthimo_log(' hfstx_find_candidate_messaged_users');
-    $minIntervalDays = MIN_MESSAGE_INTERVAL_DAYS * 24 * 60 * 60;
-    $timeMaxDaysBackToLook = time() - ($minIntervalDays * 4);
-    //all $timeMaxDaysBackToLook = 0;
+    $admin_only_clause = variable_get('healthimo_messaging_outbound_to_admin_user_only', 1) == 1 ? " AND u.uid = 1" : "";
+    $minIntervalDaysInSeconds = 365 * (24 * 60 * 60);
+    $timeMaxDaysBackToLook = time() - ($minIntervalDaysInSeconds * 4);
     return db_query(
             "
         SELECT DISTINCT u.uid
         FROM {users} u
         JOIN {profile_values} pv
             ON pv.uid = u.uid
-        JOIN {" .TABLE_MESSAGE_LOG ."} hfml
+        JOIN {" . TABLE_MESSAGE_LOG . "} hfml
             ON hfml.uid = u.uid
         WHERE
             hfml.created > %d
+            " .
+            $admin_only_clause
+            . "
         AND
         pv.value = 1
         AND
@@ -85,41 +81,52 @@
             OR
             pf.name = 'profile_keyword_bcbs'
         )
-        ",
-            $timeMaxDaysBackToLook
+        ", $timeMaxDaysBackToLook
     );
 }
 
 function hfstx_is_time_to_send_another_message($uid) {
     //too noisy healthimo_log( "hfstx_message_is_time_to_send_another_message=" .$uid);
-    if ( !$uid > 0 ) {
+    if (!$uid > 0) {
         return FALSE;
     }
     $message_log = hfstx_message_log_load_most_recent_sent($uid);
-    return healthimo_date_is_diff_n_or_more_days($message_log->created, time(), MIN_MESSAGE_INTERVAL_DAYS);
+
+    $hfstx_min_message_interval_days = variable_get('hfstx_min_message_interval_days', 4);
+
+    return
+    $hfstx_min_message_interval_days == 0
+    ||
+    healthimo_date_is_diff_n_or_more_days($message_log->created, time(), $hfstx_min_message_interval_days);
 }
 
 function hfstx_message_user($uid) {
-    healthimo_log( "hfstx_message_user=" .$uid);
+    healthimo_log("hfstx_message_user=" . $uid);
 
-    if ( !$uid  > 0 ) {
+    if (!$uid > 0) {
         return;
     }
 
     $account = user_load($uid);
 
-    if ( $account->profile_keyword_stop == 1 ) {
+    if ($account->profile_keyword_stop == 1) {
         return FALSE;
     }
     
     $hasEmail = !empty($account->mail);
-    $hasSms   = !empty($account->sms_user) && $account->sms_user[0]['status'] == 2 && !empty($account->sms_user[0]['number']);
+    $hasSms = !empty($account->sms_user) && $account->sms_user[0]['status'] == 2 && !empty($account->sms_user[0]['number']);
 
     if (!$hasEmail && !$hasSms) {
-        healthimo_log( "no info for user=" .$uid);
+        healthimo_log("no info for user=" . $uid);
         return FALSE;
     }
 
+    // start a new question cycle
+    $account = healthimo_profile_save(
+            $account, 'profile_question_count', 0, NULL
+    );
+    $account = user_save($account);
+    
     $quicktip = hfstx_get_next_message($account);
 
     return hfstx_send($account, $quicktip, $hasEmail, $hasSms);
@@ -127,14 +134,15 @@
 
 function hfstx_send_outbound_messages() {
     $usersMessaged = 0;
+    $hfstx_max_to_send_per_run = variable_get('hfstx_max_to_send_per_run', 1);
 
-    if ( hfstx_is_in_sending_window() ) {
+    if (hfstx_is_in_sending_window()) {
         $result = hfstx_find_unmessaged_users();
-        if ( $result ) {
+        if ($result) {
             while ($row = db_fetch_object($result)) {
-                if ( hfstx_message_user($row->uid) ) {
+                if (hfstx_message_user($row->uid)) {
                     $usersMessaged++;
-                    if ( $usersMessaged >= MAX_TO_SEND_PER_RUN ) {
+                    if ($usersMessaged >= $hfstx_max_to_send_per_run) {
                         return $usersMessaged;
                     }
                 }
@@ -142,12 +150,12 @@
         }
 
         $result = hfstx_find_candidate_messaged_users();
-        if ( $result ) {
+        if ($result) {
             while ($row = db_fetch_object($result)) {
-                if ( hfstx_is_time_to_send_another_message($row->uid) ) {
-                    if ( hfstx_message_user($row->uid) ) {
+                if (hfstx_is_time_to_send_another_message($row->uid)) {
+                    if (hfstx_message_user($row->uid)) {
                         $usersMessaged++;
-                        if ( $usersMessaged >= MAX_TO_SEND_PER_RUN ) {
+                        if ($usersMessaged >= $hfstx_max_to_send_per_run) {
                             return $usersMessaged;
                         }
                     }
@@ -157,3 +165,14 @@
     }
     return $usersMessaged;
 }
+
+function hfstx_ask_question($user, $number) {
+    if ($user->profile_question_count <
+            variable_get('healthimo_max_questions_for_single_session', 4)
+    ) {
+        $message_log = hfstx_find_question($user);
+        if ($question->message_nid == 0) {
+            return hfstx_send_to_sms($user, $message_log);
+        }
+    }
+}
Index: hfstx/hfstx.send.inc
--- hfstx/hfstx.send.inc Base (BASE)
+++ hfstx/hfstx.send.inc Locally Modified (Based On LOCAL)
@@ -26,7 +26,7 @@
         return true;
     }
 
-    $program_tid = 1; //todo x lookup program tid
+    $program_tid = 1; //lookup program tid
     // shallow clone is ok for message struct. Also, has no mid
     $message_log = clone($message_log);
     $message_log->address = $email;
@@ -67,9 +67,9 @@
 
     healthimo_log('send email to ' . $email['to']);
 
-    //if (SEND_ENABLED) {
-        drupal_mail_send($email);
-    //}
+//    //if (SEND_ENABLED) {
+//        drupal_mail_send($email);
+//    //}
 
     $message_log->processed = time();
     $message_log = hfstx_message_log_save($message_log);
@@ -81,14 +81,16 @@
     //$phone = DEBUG ? '2146415465' : $account->sms_user[0]['number'];
     $phone = $account->sms_user[0]['number'];
 
-    $program_tid = 1; //todo x lookup program tid
+    $program_tid = 1; //lookup program tid
     // shallow clone is ok for message struct. Also, has no mid
     $message_log = clone($message_log);
     $message_log->address = $phone;
     $message_log = hfstx_message_log_save($message_log);
 
     if ($message_log->response_expected) {
-        $message_log->message = "Reply " . $message_log->message;
+        $account = healthimo_profile_save(
+                $account, 'profile_question_count', $account->profile_question_count + 1, PROFILE_CATEGORY_PHR
+        );
     }
 
     healthimo_log(' send sms');
@@ -96,9 +98,7 @@
     //if (SEND_ENABLED) {
         //healthimo_sms_send
         healthimo_sms_outgoing(
-                $phone,
-                trim($message_log->message),
-                array('response_expected' => $message_log->response_expected,)
+            $phone, trim($message_log->message), array('response_expected' => $message_log->response_expected,)
         );
     //}
 
Index: hfstx/hfstx.test
--- hfstx/hfstx.test Base (BASE)
+++ hfstx/hfstx.test Locally Modified (Based On LOCAL)
@@ -28,7 +28,7 @@
         // run cron
         // user one now in message log w/ correct state?
         $this->assertEqual(1, 1);
-        // todo x create content type table for testing
+        // x create content type table for testing
         // Table 'healthimo.simpletest737757content_type_quicktip' doesn't exist query:
         // hfstx_cron();
         $this->assertEqual(1, 1);
Index: tests/quicktip.test
--- tests/quicktip.test Base (BASE)
+++ tests/quicktip.test Locally Modified (Based On LOCAL)
@@ -55,6 +55,6 @@
     function testSomething() {
         $this->assertTrue(true);
     }
-    //todo X quick tip tests by TID, for asthma vs hfstx
\ No newline at end of file
+    //quick tip tests by TID, for asthma vs hfstx
\ No newline at end of file
 
 }
